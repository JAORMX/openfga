// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: dispatch/v1alpha1/dispatch_service.proto

package dispatchv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DispatchService_ReverseExpand_FullMethodName = "/dispatch.v1alpha1.DispatchService/ReverseExpand"
)

// DispatchServiceClient is the client API for DispatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispatchServiceClient interface {
	ReverseExpand(ctx context.Context, in *ReverseExpandRequest, opts ...grpc.CallOption) (DispatchService_ReverseExpandClient, error)
}

type dispatchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatchServiceClient(cc grpc.ClientConnInterface) DispatchServiceClient {
	return &dispatchServiceClient{cc}
}

func (c *dispatchServiceClient) ReverseExpand(ctx context.Context, in *ReverseExpandRequest, opts ...grpc.CallOption) (DispatchService_ReverseExpandClient, error) {
	stream, err := c.cc.NewStream(ctx, &DispatchService_ServiceDesc.Streams[0], DispatchService_ReverseExpand_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dispatchServiceReverseExpandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DispatchService_ReverseExpandClient interface {
	Recv() (*ReverseExpandResponse, error)
	grpc.ClientStream
}

type dispatchServiceReverseExpandClient struct {
	grpc.ClientStream
}

func (x *dispatchServiceReverseExpandClient) Recv() (*ReverseExpandResponse, error) {
	m := new(ReverseExpandResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DispatchServiceServer is the server API for DispatchService service.
// All implementations must embed UnimplementedDispatchServiceServer
// for forward compatibility
type DispatchServiceServer interface {
	ReverseExpand(*ReverseExpandRequest, DispatchService_ReverseExpandServer) error
	mustEmbedUnimplementedDispatchServiceServer()
}

// UnimplementedDispatchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDispatchServiceServer struct {
}

func (UnimplementedDispatchServiceServer) ReverseExpand(*ReverseExpandRequest, DispatchService_ReverseExpandServer) error {
	return status.Errorf(codes.Unimplemented, "method ReverseExpand not implemented")
}
func (UnimplementedDispatchServiceServer) mustEmbedUnimplementedDispatchServiceServer() {}

// UnsafeDispatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispatchServiceServer will
// result in compilation errors.
type UnsafeDispatchServiceServer interface {
	mustEmbedUnimplementedDispatchServiceServer()
}

func RegisterDispatchServiceServer(s grpc.ServiceRegistrar, srv DispatchServiceServer) {
	s.RegisterService(&DispatchService_ServiceDesc, srv)
}

func _DispatchService_ReverseExpand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReverseExpandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DispatchServiceServer).ReverseExpand(m, &dispatchServiceReverseExpandServer{stream})
}

type DispatchService_ReverseExpandServer interface {
	Send(*ReverseExpandResponse) error
	grpc.ServerStream
}

type dispatchServiceReverseExpandServer struct {
	grpc.ServerStream
}

func (x *dispatchServiceReverseExpandServer) Send(m *ReverseExpandResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DispatchService_ServiceDesc is the grpc.ServiceDesc for DispatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DispatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dispatch.v1alpha1.DispatchService",
	HandlerType: (*DispatchServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReverseExpand",
			Handler:       _DispatchService_ReverseExpand_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dispatch/v1alpha1/dispatch_service.proto",
}
